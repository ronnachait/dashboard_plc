import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function PUT(
  req: Request,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    const { currentHour, doneBy } = await req.json(); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° doneBy ‡πÉ‡∏ô body ‡∏î‡πâ‡∏ß‡∏¢

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• plan ‡∏û‡∏£‡πâ‡∏≠‡∏° template ‡∏Å‡πà‡∏≠‡∏ô
    const oldPlan = await prisma.maintenancePlan.findUnique({
      where: { id },
      include: { template: true },
    });

    if (!oldPlan)
      return NextResponse.json({ error: "Plan not found" }, { status: 404 });

    const interval = oldPlan.template?.intervalHr ?? 100;

    // ‚úÖ update ‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
    const plan = await prisma.maintenancePlan.update({
      where: { id },
      data: {
        lastDoneHour: currentHour,
        nextDueHour: currentHour + interval,
        status: "DONE",
      },
      include: { template: true },
    });

    // ‚úÖ log ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏ó‡∏≥
    await prisma.maintenanceLog.create({
      data: {
        planId: plan.id,
        doneAtHour: currentHour,
        doneBy: doneBy ?? "System", // üëà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô "System"
        remarks: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Dashboard",
        status: "DONE",
      },
    });

    return NextResponse.json({ ok: true, plan });
  } catch (err) {
    console.error("‚ùå PUT /maintenance/:id error:", err);
    return NextResponse.json(
      { error: "Internal Server Error", details: String(err) },
      { status: 500 }
    );
  }
}
