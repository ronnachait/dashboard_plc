import { google } from "googleapis";
import { NextResponse } from "next/server";
import { verifyGoogleToken } from "@/lib/googleAuth";

export async function GET(req: Request) {
  const url = new URL(req.url);
  const token = url.searchParams.get("token");
  const dateParam = url.searchParams.get("date"); // ‡πÄ‡∏ä‡πà‡∏ô 21-10-25
  const shift = url.searchParams.get("shift") || "day"; // day / night

  if (!token || !dateParam)
    return NextResponse.json(
      { error: "Missing token or date" },
      { status: 400 }
    );

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡πà‡∏≠‡∏ô
  const verify = await verifyGoogleToken(token);
  if (!verify.valid) {
    return NextResponse.json(
      { error: "Token expired", reauth: true, loginUrl: "/api/google/auth" },
      { status: 401 }
    );
  }

  const auth = new google.auth.OAuth2();
  auth.setCredentials({ access_token: token });
  const sheets = google.sheets({ version: "v4", auth });

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: process.env.NEXT_PUBLIC_SHEET_ID!,
    range: "2_Daily check!B7:AC",
  });

  const rows = res.data.values;
  console.log("rows:", rows);
  if (!rows || rows.length < 1) return NextResponse.json({ error: "No data" });

  // helper: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 21-10-25 ‚Üí 2025-10-21
  const formatDate = (d: string) => {
    const [day, month, year] = d.split("-");
    return `20${year}-${month}-${day}`;
  };

  const targetDate = new Date(formatDate(dateParam));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏∞
  const startDayShift = new Date(`${formatDate(dateParam)}T08:30:00`);
  const endDayShift = new Date(`${formatDate(dateParam)}T20:30:00`);
  const startNightShift = endDayShift;
  const endNightShift = new Date(targetDate);
  endNightShift.setDate(targetDate.getDate() + 1);
  endNightShift.setHours(8, 30, 0, 0);

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏∞‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
  // üïí ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const filtered = rows.filter((r) => {
    const [d, startTime, endTime] = r;
    if (!d || !startTime || !endTime) return false;

    const start = new Date(`${formatDate(d)}T${startTime}:00`);

    if (shift === "day") {
      // ‡∏Å‡∏∞‡πÄ‡∏ä‡πâ‡∏≤: 08:30 - 20:30 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
      return start >= startDayShift && start < endDayShift;
    } else {
      // ‡∏Å‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô: 20:30 (‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô) - 08:30 (‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      const nightStart = new Date(`${formatDate(dateParam)}T20:30:00`);
      const nextDay = new Date(targetDate);
      nextDay.setDate(targetDate.getDate() + 1);
      const nightEnd = new Date(
        `${nextDay.toISOString().split("T")[0]}T08:30:00`
      );
      return start >= nightStart && start < nightEnd;
    }
  });

  // ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏∞‡∏ô‡∏±‡πâ‡∏ô
  const totalMin = filtered.reduce(
    (sum, r) => sum + parseFloat(r[3] || "0"),
    0
  );
  const totalHr = parseFloat((totalMin / 60).toFixed(2));

  return NextResponse.json({
    date: dateParam,
    shift,
    records: filtered.length,
    totalMinutes: totalMin,
    totalHours: totalHr,
  });
}
