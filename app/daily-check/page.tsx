"use client";

import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader } from "@/components/ui/loader";
import { Clock, Fuel, Gauge, Copy } from "lucide-react";
import { toast } from "sonner";

type ProblemItem = {
  date?: string;
  time?: string;
  section?: string;
  partName?: string;
  detail?: string;
  action?: string;
  needSolution?: boolean; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
};

type DailyData = {
  totalHours: number;
  fuelIn: number;
  fuelUsed: number;
  engineHour: string;
  engineHourTest: number;
  subtankLevel: string;
  firstHyd: string;
  firstEG: string;
  problems: ProblemItem[];
};

export default function DailyCheckPage() {
  const [hasGoogleAuth, setHasGoogleAuth] = useState(false);
  const [date, setDate] = useState("");
  const [shift, setShift] = useState<"day" | "night">("day");
  const [data, setData] = useState<DailyData | null>(null);
  const [pressure, setPressure] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [pressureNote, setPressureNote] = useState("");
  const [temp, setTemp] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [tempNote, setTempNote] = useState("");
  const [engineOil, setEngineOil] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [engineOilNote, setEngineOilNote] = useState("");
  const [subTank, setSubTank] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [subTankNote, setSubTankNote] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Google Token ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const res = await fetch("/api/google/token");
        setHasGoogleAuth(res.ok);
      } catch {
        setHasGoogleAuth(false);
      }
    };
    checkAuth();
  }, []);

  const handleAuthorize = () => {
    const currentUrl = window.location.pathname;
    window.location.href = `/api/google/auth?redirect=${encodeURIComponent(
      currentUrl
    )}`;
  };

  const formatDateForSheet = (isoDate: string) => {
    const [y, m, d] = isoDate.split("-");
    return `${d}-${m}-${y.slice(-2)}`;
  };

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchData = async () => {
    if (!date) return;
    setLoading(true);
    setError(null);
    let problemData: { problems?: ProblemItem[] } = { problems: [] };

    try {
      const sheetRes = await fetch(
        `/api/google/sheet?date=${formatDateForSheet(date)}&shift=${shift}`
      );

      // üëá ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (401) ‚Üí ‡πÉ‡∏´‡πâ authorize ‡πÉ‡∏´‡∏°‡πà
      if (sheetRes.status === 401) {
        const data = await sheetRes.json();
        if (data.needAuth) {
          toast.warning("üîí ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Account");
          handleAuthorize();
          return;
        }
      }

      if (!sheetRes.ok)
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏î‡πâ");
      const sheetData = await sheetRes.json();

      console.log("sheetData", sheetData);
      const dbRes = await fetch(`/api/fuel/log?date=${date}&shift=${shift}`);
      if (!dbRes.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      const db = await dbRes.json();

      const problemRes = await fetch(
        `/api/google/problem?date=${formatDateForSheet(date)}&shift=${shift}`
      );
      if (problemRes.ok) {
        const res = await problemRes.json();
        problemData = res;
      }

      const vehicleRes = await fetch(
        "/api/vehicle/23429582-fbfd-4c7b-95c1-10c17b3dfebb"
      );
      const vehicleData = vehicleRes.ok ? await vehicleRes.json() : null;
      const before = Number(vehicleData?.vehicle?.lastHourBeforeTest ?? 0);
      const after = Number(vehicleData?.vehicle?.lastHourAfterTest ?? 0);
      const engineHourTest = after - before;
      setData({
        totalHours: sheetData.totalHours ?? 0,
        fuelIn: db.fuelIn ?? 0,
        fuelUsed: db.fuelUsed ?? 0,
        engineHour: vehicleData?.vehicle?.lastHourAfterTest?.toString() ?? "-",
        engineHourTest: engineHourTest,
        subtankLevel: db.subtankLevel ?? "-",

        // ‚úÖ ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å sheetData ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà db
        firstHyd: String(sheetData.firstHYD ?? ""), // normalize: HYD -> Hyd
        firstEG: String(sheetData.firstEG ?? ""),

        problems:
          Array.isArray(problemData.problems) && problemData.problems.length > 0
            ? problemData.problems
            : [],
      });
    } catch (err) {
      console.error("‚ùå Fetch error:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Copy ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  const handleCopy = () => {
    if (!data) return;

    const targetHours = 8;

    const hourPercent = ((data.totalHours / targetHours) * 100).toFixed(0);

    const text = `
*Daily Check*

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date} (${shift === "day" ? "‡∏Å‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô" : "‡∏Å‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"})
‚è± ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${data.totalHours.toFixed(
      1
    )} / ${targetHours} ‡∏ä‡∏°. (${hourPercent}%)
‚õΩ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: ${data.fuelIn} ‡∏•‡∏¥‡∏ï‡∏£
üî• ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: ${data.fuelUsed} ‡∏•‡∏¥‡∏ï‡∏£
‚öôÔ∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${data.engineHour} ‡∏ä‡∏°.
‚öôÔ∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${data.engineHourTest} ‡∏ä‡∏°.

üõ¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå: ${engineOil} - ${data?.firstEG || "-"} mm ${
      engineOilNote ? `(${engineOilNote})` : ""
    }
üßä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ã‡∏±‡∏ö‡πÅ‡∏ó‡∏á‡∏Ñ‡πå: ${subTank} - ${data?.firstHyd || "-"} mm ${
      subTankNote ? `(${subTankNote})` : ""
    }
üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î: ${pressure} ${pressureNote ? `(${pressureNote})` : ""}
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î: ${temp} ${tempNote ? `(${tempNote})` : ""}

üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:
${
  data.problems.length > 0
    ? data.problems
        .map(
          (p, i) =>
            `${i + 1}. ${p.section}: ${p.partName} - ${p.detail}${
              p.needSolution ? " (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)" : ""
            }`
        )
        .join("\n")
    : "‡πÑ‡∏°‡πà‡∏°‡∏µ"
}
    `.trim();

    navigator.clipboard.writeText(text);
    alert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏∞‡πÉ‡∏ô LINE ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
  };

  if (!hasGoogleAuth)
    return (
      <div className="flex flex-col items-center justify-center h-screen bg-gradient-to-br from-slate-50 via-sky-50 to-slate-100">
        <div className="bg-white p-10 rounded-3xl shadow-2xl border border-slate-200 text-center max-w-md animate-scale-in">
          <h1 className="text-3xl mb-4 font-bold bg-gradient-to-r from-sky-600 to-blue-600 bg-clip-text text-transparent">
            üìã Daily Check
          </h1>
          <p className="text-gray-600 mb-6">
            ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Account ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheets
          </p>
          <Button 
            onClick={handleAuthorize} 
            className="bg-gradient-to-r from-sky-600 to-blue-600 hover:from-sky-700 hover:to-blue-700 text-white shadow-lg hover:shadow-xl transition-all"
          >
            üîó Connect Google Account
          </Button>
        </div>
      </div>
    );

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center animate-fade-in">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-sky-600 to-blue-600 bg-clip-text text-transparent mb-2">
          üß≠ Daily Check Dashboard
        </h1>
        <p className="text-gray-500">
          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet + ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        </p>
      </div>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏∞ */}
      <Card className="shadow-xl border-slate-200 animate-slide-up">
        <CardContent className="pt-6 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label className="text-gray-700 font-medium">‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
              <Input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="mt-1 shadow-sm"
              />
            </div>
            <div>
              <Label className="text-gray-700 font-medium">‡∏Å‡∏∞</Label>
              <select
                className="border border-gray-300 rounded-lg px-3 py-2 w-full mt-1 shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent"
                value={shift}
                onChange={(e) => setShift(e.target.value as "day" | "night")}
              >
                <option value="day">‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‚òÄÔ∏è</option>
                <option value="night">‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô üåô</option>
              </select>
            </div>
          </div>
          <Button
            onClick={fetchData}
            disabled={!date || loading}
            className="w-full bg-gradient-to-r from-sky-600 to-blue-600 hover:from-sky-700 hover:to-blue-700 text-white shadow-lg hover:shadow-xl transition-all"
          >
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... ‚è≥" : "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet & DB üìä"}
          </Button>
        </CardContent>
      </Card>

      {loading && <Loader />}
      {error && <p className="text-red-600 text-center font-medium">{error}</p>}

      {!loading && data && (
        <Card className="shadow-xl border-slate-200 animate-slide-up">
          <CardContent className="pt-6 space-y-4 text-sm sm:text-base">
            {/* summary */}
            <div className="flex items-center gap-2">
              <Clock className="w-5 h-5 text-sky-600" /> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏∞‡∏ô‡∏µ‡πâ:
              <b>{data.totalHours.toFixed(1)}</b> ‡∏ä‡∏°
            </div>
            <div className="flex items-center gap-2">
              <Fuel className="w-5 h-5 text-green-600" /> ‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô:{" "}
              <b>{data.fuelIn}</b> ‡∏•‡∏¥‡∏ï‡∏£
            </div>
            <div className="flex items-center gap-2">
              <Fuel className="w-5 h-5 text-orange-600" /> ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô:{" "}
              <b>{data.fuelUsed}</b> ‡∏•‡∏¥‡∏ï‡∏£
            </div>
            <div className="flex items-center gap-2">
              <Gauge className="w-5 h-5 text-red-600" /> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
              <b>{data.engineHour}</b> ‡∏ä‡∏°
            </div>
            <div className="flex items-center gap-2">
              <Gauge className="w-5 h-5 text-green-600" />{" "}
              ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
              <b>{data.engineHourTest}</b> ‡∏ä‡∏°
            </div>

            {/* dropdowns */}
            {[
              {
                label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå",
                state: engineOil,
                setState: setEngineOil,
                note: engineOilNote,
                setNote: setEngineOilNote,
                level: data?.firstEG || "-", // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°
              },
              {
                label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ã‡∏±‡∏ö‡πÅ‡∏ó‡∏á‡∏Ñ‡πå",
                state: subTank,
                setState: setSubTank,
                note: subTankNote,
                setNote: setSubTankNote,
                level: data?.firstHyd || "-", // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°
              },
              {
                label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î",
                state: pressure,
                setState: setPressure,
                note: pressureNote,
                setNote: setPressureNote,
              },
              {
                label: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î",
                state: temp,
                setState: setTemp,
                note: tempNote,
                setNote: setTempNote,
              },
            ].map((item, i) => (
              <div key={i}>
                <Label>{item.label}</Label>
                <div className="flex gap-2 mt-1 items-center">
                  <select
                    className="border rounded px-2 py-1"
                    value={item.state}
                    onChange={(e) => item.setState(e.target.value)}
                  >
                    <option>‡∏õ‡∏Å‡∏ï‡∏¥</option>
                    <option>‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤</option>
                  </select>

                  {/* ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Sheet */}
                  {item.level && (
                    <span className="text-gray-500 text-sm">
                      ( {item.level} mm )
                    </span>
                  )}

                  {item.state === "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤" && (
                    <Input
                      placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏..."
                      value={item.note}
                      onChange={(e) => item.setNote(e.target.value)}
                    />
                  )}
                </div>
              </div>
            ))}

            {/* problems */}
            {/* problems */}
            <div>
              <Label className="font-semibold">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô</Label>

              {data.problems.length > 0 ? (
                <ul className="pl-6 list-disc mt-2 text-gray-700 space-y-3">
                  {data.problems.map((p, i) => (
                    <li key={i} className="space-y-1">
                      <div className="flex flex-col">
                        <span>
                          <b>{p.section}</b>: {p.partName} ‚Äî {p.detail}{" "}
                          {p.needSolution && (
                            <span className="text-sky-600 text-sm font-medium">
                              (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
                            </span>
                          )}
                        </span>

                        {/* ‚úÖ checkbox ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤ */}
                        <label className="flex items-center gap-2 ml-1 mt-1 cursor-pointer select-none">
                          <input
                            type="checkbox"
                            checked={p.needSolution || false}
                            onChange={(e) => {
                              const updated = [...data.problems];
                              updated[i] = {
                                ...p,
                                needSolution: e.target.checked,
                              };
                              setData({ ...data, problems: updated });
                            }}
                            className="w-4 h-4 accent-sky-600 cursor-pointer"
                          />
                          <span className="text-sm text-gray-700">
                            ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </span>
                        </label>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏°‡∏µ</p>
              )}
            </div>

            <div className="pt-4 flex justify-end">
              <Button
                onClick={handleCopy}
                className="bg-sky-500 hover:bg-sky-600 text-white"
              >
                <Copy className="w-4 h-4 mr-2 inline" /> Copy ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
