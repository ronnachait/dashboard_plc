"use client";

import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader } from "@/components/ui/loader";
import { Clock, Fuel, Gauge, Copy } from "lucide-react";

type ProblemItem = {
  date?: string;
  time?: string;
  section?: string;
  partName?: string;
  detail?: string;
  action?: string;
};

type DailyData = {
  totalHours: number;
  fuelIn: number;
  fuelUsed: number;
  engineHour: string;
  subtankLevel: string;
  problems: ProblemItem[];
};

export default function DailyCheckPage() {
  const [token, setToken] = useState<string | null>(null);
  const [date, setDate] = useState("");
  const [shift, setShift] = useState<"day" | "night">("day");
  const [data, setData] = useState<DailyData | null>(null);
  const [pressure, setPressure] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [pressureNote, setPressureNote] = useState("");
  const [temp, setTemp] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [tempNote, setTempNote] = useState("");
  const [engineOil, setEngineOil] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [engineOilNote, setEngineOilNote] = useState("");
  const [subTank, setSubTank] = useState("‡∏õ‡∏Å‡∏ï‡∏¥");
  const [subTankNote, setSubTankNote] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î token ‡∏à‡∏≤‡∏Å URL ‡∏´‡∏£‡∏∑‡∏≠ localStorage
  useEffect(() => {
    const url = new URL(window.location.href);
    const tokenParam = url.searchParams.get("token");
    if (tokenParam) {
      localStorage.setItem("google_token", tokenParam);
      setToken(tokenParam);
      window.history.replaceState(null, "", "/daily-check");
    } else {
      const stored = localStorage.getItem("google_token");
      if (stored) setToken(stored);
    }
  }, []);

  const handleAuthorize = () => {
    const currentUrl = window.location.pathname; // ‡πÄ‡∏ä‡πà‡∏ô /problem ‡∏´‡∏£‡∏∑‡∏≠ /daily-check
    window.location.href = `/api/google/auth?redirect=${encodeURIComponent(
      currentUrl
    )}`;
  };

  const formatDateForSheet = (isoDate: string) => {
    const [y, m, d] = isoDate.split("-");
    return `${d}-${m}-${y.slice(-2)}`;
  };

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchData = async () => {
    if (!token || !date) return;
    setLoading(true);
    setError(null);
    let problemData: { problems?: ProblemItem[] } = { problems: [] };

    try {
      const sheetRes = await fetch(
        `/api/google/sheet?token=${token}&date=${formatDateForSheet(
          date
        )}&shift=${shift}`
      );

      // üëá ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (401) ‚Üí ‡∏•‡πâ‡∏≤‡∏á token ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà
      if (sheetRes.status === 401) {
        const data = await sheetRes.json();
        alert("üîë Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        window.location.href = data.loginUrl;
        return;
      }

      if (!sheetRes.ok)
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏î‡πâ");
      const sheetData = await sheetRes.json();

      const dbRes = await fetch(`/api/fuel/log?date=${date}&shift=${shift}`);
      if (!dbRes.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      const db = await dbRes.json();

      const problemRes = await fetch(
        `/api/google/problem?token=${token}&date=${formatDateForSheet(
          date
        )}&shift=${shift}`
      );
      if (problemRes.ok) {
        const res = await problemRes.json();
        problemData = res;
      }

      const vehicleRes = await fetch(
        "/api/vehicle/23429582-fbfd-4c7b-95c1-10c17b3dfebb"
      );
      const vehicleData = vehicleRes.ok ? await vehicleRes.json() : null;

      setData({
        totalHours: sheetData.totalHours ?? 0,
        fuelIn: db.fuelIn ?? 0,
        fuelUsed: db.fuelUsed ?? 0,
        engineHour: vehicleData?.vehicle?.lastHourAfterTest?.toString() ?? "-",
        subtankLevel: db.subtankLevel ?? "-",
        problems:
          Array.isArray(problemData.problems) && problemData.problems.length > 0
            ? problemData.problems
            : [],
      });
    } catch (err) {
      console.error("‚ùå Fetch error:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Copy ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  const handleCopy = () => {
    if (!data) return;

    const targetHours = 8;

    const hourPercent = ((data.totalHours / targetHours) * 100).toFixed(0);

    const text = `
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date} (${shift === "day" ? "‡∏Å‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô" : "‡∏Å‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"})
‚è± ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${data.totalHours.toFixed(
      1
    )} / ${targetHours} ‡∏ä‡∏°. (${hourPercent}%)
‚õΩ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: ${data.fuelIn} ‡∏•‡∏¥‡∏ï‡∏£
üî• ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: ${data.fuelUsed} ‡∏•‡∏¥‡∏ï‡∏£
‚öôÔ∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${data.engineHour} ‡∏ä‡∏°.

üõ¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå: ${engineOil} ${
      engineOilNote ? `(${engineOilNote})` : ""
    }
üßä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ã‡∏±‡∏ö‡πÅ‡∏ó‡∏á‡∏Ñ‡πå: ${subTank} ${subTankNote ? `(${subTankNote})` : ""}
üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î: ${pressure} ${pressureNote ? `(${pressureNote})` : ""}
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î: ${temp} ${tempNote ? `(${tempNote})` : ""}

üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:
${
  data.problems.length > 0
    ? data.problems
        .map((p, i) => `${i + 1}. ${p.section}: ${p.partName} - ${p.detail}`)
        .join("\n")
    : "‡πÑ‡∏°‡πà‡∏°‡∏µ"
}
    `.trim();

    navigator.clipboard.writeText(text);
    alert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏∞‡πÉ‡∏ô LINE ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
  };

  if (!token)
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <h1 className="text-2xl mb-4 font-semibold">üìã Daily Check</h1>
        <Button onClick={handleAuthorize} className="bg-sky-600 text-white">
          Sign in with Google
        </Button>
      </div>
    );

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-2xl font-bold text-sky-700">
          üß≠ Daily Check Dashboard
        </h1>
        <p className="text-gray-500 text-sm">
          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet + ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        </p>
      </div>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏∞ */}
      <Card>
        <CardContent className="pt-4 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
              <Input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
              />
            </div>
            <div>
              <Label>‡∏Å‡∏∞</Label>
              <select
                className="border rounded px-2 py-1 w-full"
                value={shift}
                onChange={(e) => setShift(e.target.value as "day" | "night")}
              >
                <option value="day">‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô</option>
                <option value="night">‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô</option>
              </select>
            </div>
          </div>
          <Button
            onClick={fetchData}
            disabled={!date || loading}
            className="w-full bg-sky-600 text-white"
          >
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." : "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet & DB"}
          </Button>
        </CardContent>
      </Card>

      {loading && <Loader />}
      {error && <p className="text-red-600 text-center font-medium">{error}</p>}

      {!loading && data && (
        <Card>
          <CardContent className="pt-4 space-y-3 text-sm sm:text-base">
            {/* summary */}
            <div className="flex items-center gap-2">
              <Clock className="w-5 h-5 text-sky-600" /> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏∞‡∏ô‡∏µ‡πâ:
              <b>{data.totalHours.toFixed(1)}</b> ‡∏ä‡∏°
            </div>
            <div className="flex items-center gap-2">
              <Fuel className="w-5 h-5 text-green-600" /> ‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô:{" "}
              <b>{data.fuelIn}</b> ‡∏•‡∏¥‡∏ï‡∏£
            </div>
            <div className="flex items-center gap-2">
              <Fuel className="w-5 h-5 text-orange-600" /> ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô:{" "}
              <b>{data.fuelUsed}</b> ‡∏•‡∏¥‡∏ï‡∏£
            </div>
            <div className="flex items-center gap-2">
              <Gauge className="w-5 h-5 text-green-600" /> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
              <b>{data.engineHour}</b> ‡∏ä‡∏°
            </div>

            {/* dropdowns */}
            {[
              {
                label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå",
                state: engineOil,
                setState: setEngineOil,
                note: engineOilNote,
                setNote: setEngineOilNote,
              },
              {
                label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ã‡∏±‡∏ö‡πÅ‡∏ó‡∏á‡∏Ñ‡πå",
                state: subTank,
                setState: setSubTank,
                note: subTankNote,
                setNote: setSubTankNote,
              },
              {
                label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î",
                state: pressure,
                setState: setPressure,
                note: pressureNote,
                setNote: setPressureNote,
              },
              {
                label: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î",
                state: temp,
                setState: setTemp,
                note: tempNote,
                setNote: setTempNote,
              },
            ].map((item, i) => (
              <div key={i}>
                <Label>{item.label}</Label>
                <div className="flex gap-2 mt-1">
                  <select
                    className="border rounded px-2 py-1"
                    value={item.state}
                    onChange={(e) => item.setState(e.target.value)}
                  >
                    <option>‡∏õ‡∏Å‡∏ï‡∏¥</option>
                    <option>‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤</option>
                  </select>
                  {item.state === "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤" && (
                    <Input
                      placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏..."
                      value={item.note}
                      onChange={(e) => item.setNote(e.target.value)}
                    />
                  )}
                </div>
              </div>
            ))}

            {/* problems */}
            <div>
              <Label className="font-semibold">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô</Label>
              {data.problems.length > 0 ? (
                <ul className="pl-6 list-disc mt-2 text-gray-700 space-y-1">
                  {data.problems.map((p, i) => (
                    <li key={i}>
                      <b>{p.section}</b>: {p.partName} ‚Äî {p.detail}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏°‡∏µ</p>
              )}
            </div>

            <div className="pt-4 flex justify-end">
              <Button
                onClick={handleCopy}
                className="bg-sky-500 hover:bg-sky-600 text-white"
              >
                <Copy className="w-4 h-4 mr-2 inline" /> Copy ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
