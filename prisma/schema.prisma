datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PlcLog {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  pressure    Float[]
  temperature Float[]
  action      String   @default("OK") // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° default
  reason      String?
}

model PlcSetting {
  id        String   @id @default(uuid())
  sensor    String   @unique
  maxValue  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlcStatus {
  id        String   @id @default(uuid())
  isRunning Boolean  @default(false) // ‚úÖ ‡πÅ‡∏ó‡∏ô M1000
  alarm     Boolean  @default(false) // alarm ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
  reason    String? // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• alarm
  updatedAt DateTime @updatedAt
}

model PlcCommand {
  id        String   @id
  command   String
  source    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NgrokTunnel {
  id        String   @id @default("ngrok-url") // ‡πÉ‡∏ä‡πâ fixed id 1 record
  url       String
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @default(uuid())
  name     String?
  email    String  @unique
  password String
  role     String
}

enum Shift {
  MORNING
  NIGHT
}

model Vehicle {
  id                 String            @id @default(uuid())
  name               String
  plateNo            String?
  lastHourBeforeTest Float?
  lastHourAfterTest  Float?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  fuelLogs           FuelLog[]
  greasePoints       GreasePoint[]
  maintenancePlans   MaintenancePlan[] // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
}

model FuelLog {
  id        String    @id @default(uuid())
  date      DateTime  @default(now())
  shift     Shift?
  shiftDate DateTime? // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ö‡∏ö optional
  fuelIn    Float
  fuelUsed  Float
  note      String?
  vehicleId String
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
}

model GreasePoint {
  id             String  @id @default(uuid())
  pointNo        Int // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà (1..32)
  name           String // ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å
  fittings       Int // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏≠‡∏±‡∏î (QTY)
  positions      String? // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô LH, RH
  detail         String? // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  intervalHours  Int // ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î (‡∏ä‡∏°.)
  lastGreaseHour Float // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏î
  nextDueHour    Float // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  picture        String? // path ‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
  vehicleId      String
  vehicle        Vehicle @relation(fields: [vehicleId], references: [id])
}

model MaintenanceTemplate {
  id         String            @id @default(uuid())
  category   String // ‡πÄ‡∏ä‡πà‡∏ô "Engine", "Fuel", "Hydraulic"
  item       String // ‡πÄ‡∏ä‡πà‡∏ô "Fuel Filter", "Air Filter"
  action     String // ‡πÄ‡∏ä‡πà‡∏ô "Change", "Clean", "Check"
  intervalHr Int? // ‡∏£‡∏≠‡∏ö (‡∏ä‡∏°.)
  note       String?
  active     Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  plans      MaintenancePlan[]
}

model MaintenancePlan {
  id           String              @id @default(uuid())
  vehicleId    String
  vehicle      Vehicle             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  templateId   String
  template     MaintenanceTemplate @relation(fields: [templateId], references: [id])
  nextDueHour  Float
  lastDoneHour Float?
  status       PlanStatus          @default(PENDING)
  updatedAt    DateTime            @updatedAt
  logs         MaintenanceLog[]

  @@unique([vehicleId, templateId]) // ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ô‡∏µ‡πâ‡∏û‡∏≠
}

model MaintenanceLog {
  id         String          @id @default(uuid())
  planId     String
  plan       MaintenancePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  doneAtHour Float
  doneAt     DateTime        @default(now())
  doneBy     String?
  remarks    String?
  photoUrl   String?
  status     LogStatus       @default(DONE)
  createdAt  DateTime        @default(now())
}

enum PlanStatus {
  PENDING
  DONE
  OVERDUE
}

enum LogStatus {
  DONE
  SKIPPED
}

